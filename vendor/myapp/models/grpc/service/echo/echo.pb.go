// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

/*
Package echo is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	Request
	Reply
*/
package echo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Reply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "echo.Request")
	proto.RegisterType((*Reply)(nil), "echo.Reply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echo service

type EchoClient interface {
	EchoHello(ctx context.Context, opts ...grpc.CallOption) (Echo_EchoHelloClient, error)
	EchoTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (Echo_EchoTimeClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) EchoHello(ctx context.Context, opts ...grpc.CallOption) (Echo_EchoHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/echo.Echo/EchoHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoEchoHelloClient{stream}
	return x, nil
}

type Echo_EchoHelloClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type echoEchoHelloClient struct {
	grpc.ClientStream
}

func (x *echoEchoHelloClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoEchoHelloClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *echoClient) EchoTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (Echo_EchoTimeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[1], c.cc, "/echo.Echo/EchoTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoEchoTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_EchoTimeClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type echoEchoTimeClient struct {
	grpc.ClientStream
}

func (x *echoEchoTimeClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Echo service

type EchoServer interface {
	EchoHello(Echo_EchoHelloServer) error
	EchoTime(*Request, Echo_EchoTimeServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_EchoHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).EchoHello(&echoEchoHelloServer{stream})
}

type Echo_EchoHelloServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type echoEchoHelloServer struct {
	grpc.ServerStream
}

func (x *echoEchoHelloServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoEchoHelloServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Echo_EchoTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).EchoTime(m, &echoEchoTimeServer{stream})
}

type Echo_EchoTimeServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type echoEchoTimeServer struct {
	grpc.ServerStream
}

func (x *echoEchoTimeServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoHello",
			Handler:       _Echo_EchoHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoTime",
			Handler:       _Echo_EchoTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb9, 0xd8, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x45, 0x2e, 0xd6, 0xa0, 0xd4, 0x82,
	0x9c, 0x4a, 0xdc, 0x4a, 0x8c, 0x12, 0xb9, 0x58, 0x5c, 0x93, 0x33, 0xf2, 0x85, 0x74, 0xb9, 0x38,
	0x41, 0xb4, 0x47, 0x6a, 0x4e, 0x4e, 0xbe, 0x10, 0xaf, 0x1e, 0xd8, 0x3e, 0xa8, 0x05, 0x52, 0xdc,
	0x30, 0x6e, 0x41, 0x4e, 0xa5, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x90, 0x16, 0x17, 0x07, 0x48,
	0x79, 0x48, 0x66, 0x6e, 0x2a, 0x7e, 0xd5, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x77, 0x1b, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xbe, 0xe6, 0xa5, 0xc5, 0x00, 0x00, 0x00,
}
